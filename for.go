package main

import "fmt"

//【Goのforループについて】
// forループは、同じ処理を繰り返し実行するための制御構文です。
// Goでは他の言語のwhile文やdo-while文も全てforで表現します。
//
// 【forループの基本形】
// for 初期化; 継続条件; 更新 {
//     繰り返し実行する処理
// }
//
// 【重要な概念】
// 1. 初期化：ループ開始前に1回だけ実行（例：カウンタ変数の初期化）
// 2. 継続条件：各繰り返しの前にチェック（真の間繰り返す）
// 3. 更新：各繰り返しの後に実行（例：カウンタの増加）

func for_test() {
	// 【基本的なforループの例】
	// 0から4までの数字を表示する
	for index := 0; index <= 4; index++ {
		// continue文は、それ以降の処理をスキップして次のループへ進む
		if index == 3 {
			continue // index が 3 の時はスキップ
		}
		fmt.Println(index)
	}

	// 【配列とforループの組み合わせ】
	// 配列の要素を順番に処理する
	arr := [...]int{2, 4, 6, 8, 10}
	sum := 0

	// range を使用した繰り返し処理
	// 【解説】
	// 1. range は配列やスライスの要素を順番に返す
	// 2. i にはインデックス（添字）が入る
	// 3. v には要素の値が入る
	for i, v := range arr {
		sum += v
		fmt.Println(i, v, sum)
	}
	fmt.Println(sum)
}

// 【練習問題】
// 目的：1から10までの数字のうち、3の倍数と5の倍数以外の数の合計を求める
//
// 【解説】
// 1. sum変数で合計を管理
// 2. 1から10までループを回す
// 3. if文とcontinueを使って3と5の倍数をスキップ
// 4. それ以外の数を合計に加算
func for_training() {
	sum := 0
	for i := 1; i <= 10; i++ {
		// 3の倍数または5の倍数の場合はスキップ
		if i%3 == 0 || i%5 == 0 {
			continue
		}
		sum += i
	}
	fmt.Println(sum)
}
